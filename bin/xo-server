#!/usr/bin/env node

'use strict'

// ===================================================================

// Better stack traces if possible.
require('../better-stacks')

// Use Bluebird for all promises as it provides better performance and
// less memory usage.
global.Promise = require('bluebird')

// Make unhandled rejected promises visible.
process.on('unhandledRejection', function (reason) {
  console.warn('[Warn] Possibly unhandled rejection:', reason && reason.stack || reason)
})

;(function (EE) {
  var proto = EE.prototype
  var emit = proto.emit
  proto.emit = function patchedError (event, error) {
    if (event === 'error' && !this.listenerCount(event)) {
      return console.warn('[Warn] Unhandled error event:', error && error.stack || error)
    }

    return emit.apply(this, arguments)
  }
})(require('events').EventEmitter)

try {
  const memwatch = require('memwatch-next')
  let hd
  memwatch.on('stats', () => {
    hd = new memwatch.HeapDiff()
  })
  memwatch.on('leak', info => {
    console.log(info)
    console.log(hd.end())
  })
} catch (error) {
  if (error == null || error.code !== 'MODULE_NOT_FOUND') {
    throw error
  }
}

require('exec-promise')(require('../'))
